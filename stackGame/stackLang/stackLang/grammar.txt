Program -> Stmts $
Stmts -> Stmt Stmts | .
Stmt -> Splitst | Whilest | Ifst | Op | FunDec | RoutineDec | Returnst | Importst
Splitst -> split Signal Stmts1 Stmts2 Splitclose
Splitclose -> reverse | stack | merge
Whilest -> while Signal Stmts
Ifst -> if Signal Stmts Elsest
Elsest -> else Stmts | nil
FunDec -> fun name* numberLiteral* numberLiteral* Stmts
RoutineDec -> routine name* Stmts
Returnst -> return
Importst -> import fname*
Stmts1 -> Stmts
Stmts2 -> Stmts
Op -> ArithmeticOp | push PushOp | pop PopOp | FunCall
PushOp -> numberLiteral* | @ SignalName | input numberLiteral*
PopOp -> output numberLiteral* | @ SignalName
ArithmeticOp -> BinaryOp | UnaryOp
BinaryOp -> add | sub | and | or | gt | lt | eq | shift | + | - | & | % | > | < | = | {
UnaryOp -> neg | not | rotate | test | odd | printc | printn | ~ | ! | ^ | / | #
Signal -> numberLiteral* | @ SignalName | FunCall
FunCall -> name*
SignalName -> KeySource
KeySource -> height | top | temp
